# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform Deployment'

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  # Security Job: Checkov
  checkov:
    name: 'Run Checkov'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Checkov
        run: |
          pip install checkov

      - name: Run Checkov
        run: checkov -d . || true

  # Security Job: TFLint
  tflint:
    name: 'Run TFLint'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        run: tflint . || true

  # Security Job: Infracost
  infracost:
    name: 'Run Infracost'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Infracost
        run: |
          curl -sSL https://github.com/infracost/infracost/releases/download/v0.10.10/infracost-linux-amd64-v0.10.10.tar.gz | tar -xzv

      - name: Run Infracost
        run: |
          infracost breakdown --path . || true

  # Terraform Jobs: Dev
  terraform-dev:
    name: 'Terraform Dev'
    runs-on: ubuntu-latest
    needs: [checkov, tflint, infracost]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Terraform Environment Variables for Azure Authentication
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_AD_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init (Dev)
        run: |
          cd dev
          terraform init || true

      - name: Terraform Validate (Dev)
        run: |
          cd dev
          terraform validate || true

      - name: Terraform Plan (Dev)
        run: |
          cd dev
          terraform plan -var-file="terraform.tfvars" -input=false || true

      - name: Terraform Apply (Dev)
        run: |
          cd dev
          terraform apply -var-file="terraform.tfvars" -auto-approve -input=false || true

  # Terraform Jobs: QA
  terraform-qa:
    name: 'Terraform QA'
    runs-on: ubuntu-latest
    needs: [checkov, tflint, infracost]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Terraform Environment Variables for Azure Authentication
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_AD_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init (QA)
        run: |
          cd qa
          terraform init || true

      - name: Terraform Validate (QA)
        run: |
          cd qa
          terraform validate || true

      - name: Terraform Plan (QA)
        run: |
          cd qa
          terraform plan -var-file="terraform.tfvars" -input=false || true

      - name: Terraform Apply (QA)
        run: |
          cd qa
          terraform apply -var-file="terraform.tfvars" -auto-approve -input=false || true

  # Terraform Jobs: Prod
  terraform-prod:
    name: 'Terraform Prod'
    runs-on: ubuntu-latest
    needs: [checkov, tflint, infracost]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Terraform Environment Variables for Azure Authentication
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_AD_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init (Prod)
        run: |
          cd prod
          terraform init || true

      - name: Terraform Validate (Prod)
        run: |
          cd prod
          terraform validate || true

      - name: Terraform Plan (Prod)
        run: |
          cd prod
          terraform plan -var-file="terraform.tfvars" -input=false || true

      - name: Terraform Apply (Prod)
        run: |
          cd prod
          terraform apply -var-file="terraform.tfvars" -auto-approve -input=false || true
